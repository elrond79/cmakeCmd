#!/usr/bin/env python

import sys
import os
import subprocess
import argparse
import pipes
import re

# Suggested usage:
# create an overall dir for this project, say 'viewerQT'
# clone the git project containing this file into that dir, calling it src, ie
#     cd viewerQT
#     git clone [path_to_this_git_project] src
# make a dir under the top viewerQT dir called build/debug, and then make a
# cmakeCmd file there that runs this:
#     cd viewerQT
#     mkdir -p build/debug
#     cd build/debug
#     echo '#!/bin/bash' > cmakeCmd
#     echo '../../src/cmakeCmd --debug "$@"' >> cmakeCmd
#     chmod +x cmakeCmd
# Then, run this to both generate an eclipse project, and the makefiles:
#     cd viewerQT/build/debug
#     ./cmakeCmd
#     ./cmakeCmd --eclipse

CWD = os.getcwd()
CWD_NAME = os.path.basename(CWD)

THIS_PATH = os.path.normcase(os.path.normpath(os.path.realpath(os.path.abspath(sys.argv[0]))))
THIS_DIR = os.path.dirname(THIS_PATH)

def arg_parser():
    parser = argparse.ArgumentParser(description='execute the cmake command for this project',
        epilog='If neither the release or debug flags are given, then the build '
            'type will be set to debug if the path contains the string "debug" '
            'anywhere in it, otherwise it will be set to release')
    parser.add_argument('--release', help='Set the build type to release',
        action='store_const', const='release', dest='buildType')
    parser.add_argument('--debug', help='Set the build type to debug',
        action='store_const', const='debug', dest='buildType')
    parser.add_argument('--releaseDbg', help='Set the build type to releaseDbg',
        action='store_const', const='releaseDbg', dest='buildType')
    parser.add_argument('--eclipse', action='store_true', help='Create the eclipse '
        'project file instead of the normal Makefile')
    parser.add_argument('--clean', action='store_true', help='Wipe the current '
        'directory clean of cmake files before building')
    parser.add_argument('--sourceDir', help='The source directory for the project '
        '(the directory which holds the top-level CMakeLists.txt) - defaults to the'
        'directory where this cmakeCmd file resides (%(default)s)', default=THIS_DIR)
    
    return parser

def main(args=None):
    if args is None:
        args = sys.argv[1:]
    parser = arg_parser()
    parsed = parser.parse_args(args)
    buildType = getattr(parsed, "buildType", None)
    if not buildType:
        buildType = {'release':'release',
                     'debug':'debug',
                     'releasedbg':'releaseDbg'}.get(CWD_NAME.lower(), 'debug')
    run_cmake(buildType=buildType, eclipse=parsed.eclipse, clean=parsed.clean,
            sourceDir=parsed.sourceDir)

CMAKE_FILES_TO_CLEAN_RE = re.compile(r'''(^(CMake(?!Lists.txt$)|Makefile).*)|(.*cmake$)''')

def run_cmake(buildType='release', eclipse=False, clean=False, sourceDir=THIS_DIR):
    if buildType.lower() == 'release':
        buildType = 'Release'
    elif buildType.lower() == 'releasedbg':
        buildType = 'RelWithDebInfo'
    elif buildType.lower() == 'debug':
        buildType = 'Debug'
    else:
        raise ValueError(buildType)

    if clean:
        for entry in os.listdir(CWD):
            if not CMAKE_FILES_TO_CLEAN_RE.match(entry):
                continue
            fullPath = os.path.join(CWD, entry)
            try:
                if os.path.isdir(fullPath):
                    print "deleting dir:", fullPath
                    import shutil
                    shutil.rmtree(fullPath)
                elif os.path.isfile(fullPath):
                    print "deleting file:", fullPath
                    os.remove(fullPath)
            except Exception:
                import traceback
                print "error deleting %s:" % fullPath
                traceback.print_exc()
    
    args = ['cmake', sourceDir, '-DCMAKE_BUILD_TYPE=%s' % buildType]
    msg = ''
    if eclipse:
        args.append('-GEclipse CDT4 - Unix Makefiles')
        msg = 'building eclipse project files'
    else:
        msg = 'building project Makefiles'
    msg += ' (%s)' % buildType
    print msg
    print ' '.join(pipes.quote(x) for x in args)
    subprocess.check_call(args)

if __name__ == '__main__':
    main()